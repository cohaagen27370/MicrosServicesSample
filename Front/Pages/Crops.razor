@page "/Crops"
@using CommonDto.Enumerations
@using CommonDto.Models
@using Front.Services
@using Radzen.Blazor.Rendering
@inject DataService DataService
@inject DialogService DialogService

<h3>Crops</h3> <RadzenButton Click="@(args => Modify(newCrop))" Icon="add_circle" Text="Add new" ButtonStyle="ButtonStyle.Primary" />

<table class="fullwidth">
    <thead>
    <tr>
        <th class="center">Start date</th>
        <th class="center">End date</th>
        <th class="center">Seed</th>
        <th class="center">Status</th>
        <th class="center"></th>
        <th class="center"></th>
    </tr>
    </thead>
    <tbody>
    @if (crops == null)
    {
        <tr><td colspan="4">Loading...</td></tr>
    }
    else
    {
        @foreach (CropDto crop in crops)
        {
    
            <tr>
                <td class="center">@crop.StartDate</td>
                <td class="center">@crop.EndDate</td>
                <td class="center">@crop.SeedName</td>
                <td class="center">@crop.Status.ToString()</td>
                <td class="center"><RadzenButton Text="Modifier" ButtonStyle="ButtonStyle.Primary" Click=@(args => Modify(crop)) /></td>
            </tr>
        }
    }
    </tbody>
</table>


@code {
    
    List<CropDto>? crops = null;
    List<SeedDto>? seeds = null;
    CropDto newCrop = new CropDto();

    string cropId = string.Empty;
    int status = 0;
    SeedDto seedSelected = new SeedDto();
    
    async Task Modify(CropDto crop)
    {
        this.seedSelected = this.seeds!.Single(s => s.Id == crop.SeedId);
        
        var result = await DialogService.OpenAsync("Modify a crop", ds =>
            @<RadzenStack Gap="1.5rem">
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12" SizeSM="12">
                        <RadzenStack>
                            <RadzenFormField Text="Id" Variant="Variant.Filled" Visible="false">
                                <RadzenTextBox @bind-Value="@cropId" />
                            </RadzenFormField>                            
                            <RadzenFormField Text="Start date" Variant="Variant.Filled">
                                <RadzenDatePicker @bind-Value="@crop.StartDate"/>
                            </RadzenFormField>
                            <RadzenFormField Text="End date" Variant="Variant.Filled">
                                <RadzenDatePicker @bind-Value="@crop.EndDate"/>
                            </RadzenFormField>
                            <RadzenFormField Text="Seed" Variant="Variant.Filled">
                                <RadzenDropDown @bind-Value=@seedSelected Data=@seeds TextProperty="@nameof(SeedDto.Name)" Name="seedList" />
                            </RadzenFormField>
                            <RadzenFormField Text="Status" Variant="Variant.Filled">
                                <RadzenRadioButtonList @bind-Value="@status" TValue="int" class="rz-m-4 rz-mt-8">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="Just sown" Value="0"/>
                                        <RadzenRadioButtonListItem Text="Growing" Value="1"/>
                                        <RadzenRadioButtonListItem Text="Harvest ready" Value="2"/>
                                        <RadzenRadioButtonListItem Text="Harvested" Value="3"/>
                                    </Items>
                                </RadzenRadioButtonList>
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Save" Click="@(args => SaveCrop(ds, crop, crop.Id))" Style="width: 80px;" />
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>);
    }
    
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await InitDatas();
    }

    private async Task InitDatas()
    {
        List<CropDto>? cropsTemp = await DataService.GetAllCrops();
        this.seeds = await DataService.GetAllSeeds();
        
        this.crops = [];
        
        cropsTemp.ForEach(x =>
        {
            this.seedSelected = this.seeds!.Single(s => s.Id == x.SeedId);
            x.SeedName = this.seedSelected.Name;
            crops.Add(x);
        });
    }
    
    private async Task SaveCrop(DialogService ds, CropDto newUpdateCrop, Guid? id)
    {
        newUpdateCrop.Id = id;
        newUpdateCrop.Status = (CropStatus)status;
        newUpdateCrop.SeedId = this.seedSelected.Id!.Value;
        await DataService.AddNewCrop(newUpdateCrop);
        ds.Close(true);
        await InitDatas();
    }
}
